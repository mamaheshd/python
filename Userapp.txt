2079/03/19
django-admin startapp (Userapp app name)
create file urls.py and forms.py
forms.py
#from dataclasses import fields
from django import forms
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth.models import User
from django.core.validators import EmailValidator,RegexValidator
class RegistrationForm(UserCreationForm):
    email=forms.EmailField(required= True,validators=[EmailValidator])
    password1 = forms.CharField(widget=forms.PasswordInput,validators=[RegexValidator("^(?=.[A-Za-z])(?=.\d)(?=.[@$!%#?&])[A-Za-z\d@$!%*#?&]{8,}$", message="Password must contain atleast 8 characters with one special character")])
    class Meta:
        model = User
        fields = ("username", "email", "password1","password2")

userapp-> template crate folder->create Userapp folder->create register.htm 
{% load crispy_forms_tags%}
<html>
    <head>

    </head>
    <body>
        <div class="card">
            <h1 class="card-header">
            Register and Join us
            </h1>
            <div class="card-body">
            <form method="POST" class="form-group">
            {% csrf_token %}
            {% for field in form %}
            {{ field.errors }}
            {% endfor %}
            <div class="row">
            <div class="col">
            {{form.username|as_crispy_field}}
            </div>
            <div class="col">
            {{form.email|as_crispy_field}}
            
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                {{form.password1|as_crispy_field}}
                            </div>
                            <div class="col">
                                {{form.password2|as_crispy_field}}
                            </div>
            
                        </div>
                        <button type="submit" class="btn btn-success">Register</button>
                    </form>
                    <p>Have an account? <a href="{% url 'user_login' %}">Login</a></p>
                </div>
            
            
            </div>
    </body>
</html>


	(Userapp)views.py

from django.shortcuts import render,redirect
from django.contrib.auth import authenticate,login,logout
from django.contrib import messages
from .forms import RegistrationForm

# Create your views here.
def register(request):
    if request.method == "POST":
        form = RegistrationForm(request.POST)
        if form.is_valid():
            form.save()
            username = form.cleaned_data.get('username')
            raw_password = form.cleaned_data.get('password1')
            user = authenticate(username=username, password=raw_password)
            login(request, user)
            messages.success(request, "Registration successful." )
            return redirect('user_login')

        else:
            form = RegistrationForm()
            context = {"form":form}
            return render(request, 'usermanagement/register.htm', context)
userapp urls.py
from Userapp import views
#from django.contrib import admin
from django.urls import path,include
urlpatterns = [
   #path('',views.home,name='homes'),
   path('register/', views.register, name="register"),
   #path('login/',views.user_logout,name='user')
]


(mysides)		setting.py
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # 'DIRS': [],
        'DIRS': [os.path.join(BASE_DIR, 'templates')], 
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors':
            [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

terminal  pip install ipdb (used to detect error)
views.py 
import ipdb;ipdb.set_trace()

views.py login function
from django.contrib.auth.forms import AuthenticationForm,PasswordResetForm
def user_login(request):
    if request.method == 'POST':
        form = AuthenticationForm(request, data=request.POST)
    if form.is_valid():
        username = form.cleaned_data.get('username')
        password = form.cleaned_data.get('password')
        user = authenticate(username=username, password=password)
        if user is not None:
            login(request, user)
            return redirect('book-list')
        else:
            messages.error(request,"You are not registered")

    else:
        messages.error(request,"Invalid credentials")
    form = AuthenticationForm()
    return render(request, 'usermanagement/login.htm',{'form':form})

login.htm
<html>
    <body>
        <div class="container py-5">
            <h1>
            Login
            </h1>
            
                    <form action="" method="post" class="form-group" >
                        {% csrf_token %}
            
                        {{form|crispy}}
                        <button class="btn btn-primary" type="submit" >Login</button>
                    </form>
                    <p>Don't have an account? <a href="/register">Register</a></p>
                    <div class="row mb-4">        
                        <div class="col">
                          <a href="/password_reset">Forgot password?</a>
                        </div>
                    </div>
            
            
            </div>
    </body>
</html>

2079/03/21

password reset 
password in gmail:-  nloobjnhcxanmylu
1)
settings.py
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#password reset
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

#User verifications
EMAIL_USE_TLS = True
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = 'memaheshd@gmail.com'
EMAIL_HOST_PASSWORD = 'nloobjnhcxanmylu'
EMAIL_PORT = 587

2)
views.py 
 try:
                        send_mail(subject, email, 'memaheshd@gmail.com(mail whome it need to send)' , [user.email], fail_silently=False)
                    except BadHeaderError:

3)logout 
views.py
def user_logout(request):
    logout(request)
    message.info(request,"Sucess")
    return redirect('register')
4)
userapp ->urls.py
    path("password_reset/",views.password_reset_request,namew='password_reset')

5)main urls.py
path('password_reset/done/', auth_views.PasswordResetDoneView.as_view(template_name='usermanagement/password_reset_done.htm'), name='password_reset_done'),
path('reset/<uidb64>/<token>/', auth_views.PasswordResetConfirmView.as_view(template_name="usermanagement/password_reset_confirm.htm"), name='password_reset_confirm'),
path('reset/done/', auth_views.PasswordResetCompleteView.as_view(template_name='usermanagement/password_reset_complete.htm'), name='password_reset_complete'),

6)
views.py
from django.contrib.auth.decorators import login_required
from django.utils.decorators import method_decorator

(add before any class)@method_decorator(login_required(login_url = 'user_login'), name='dispatch')


7)

